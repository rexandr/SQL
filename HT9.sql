	
	USE master; 
	GO
	
	USE Stat; 
	GO


	/*
	-- VIEW for previous task

		CREATE VIEW 
			FLIGHT_WITH_SCANDINAVIAN_VIEW
				AS 
					SELECT
						L.FLTID, 
						L.DATOP
					FROM 
						LEG
					AS 
						L
					WHERE 
						EXISTS
							(
								SELECT
									*
								FROM
									COUNTRIES AS C
								WHERE
									(C.ID = L.CTRYCDFR 
									OR
									C.ID = L.CTRYCDTO)
										AND
									C.SCANDINAVIAN = 1
							)
				
							
		SELECT * FROM FLIGHT_WITH_SCANDINAVIAN_VIEW ORDER BY DATOP;
	*/




		--DBChanging

	BEGIN TRANSACTION STATIONS_UPDATE

	BEGIN TRY
		-- STATIONS with changes

		exec sp_rename 'dbo.STATIONS.ID', 'STN_KEY';
		exec sp_rename 'dbo.STATIONS.STATION', 'STN_NAME';

		ALTER TABLE 
				STATIONS
					ADD 
						STN_FULL_NAME varchar(100) DEFAULT ' ';



		ALTER TABLE 
				STATIONS
					ADD 
						STN_COUNTRY int DEFAULT  ' ';


		
	END TRY

				BEGIN CATCH
					SELECT 
						ERROR_NUMBER() AS ERROR_N,
						ERROR_MESSAGE() AS ERROR_M,
						ERROR_SEVERITY() AS ERROR_SEV,
						ERROR_LINE () AS ERROR_L,
						ERROR_PROCEDURE () AS ERROR_PROC,
						ERROR_STATE () AS ERROR_$TATE,
						@@TRANCOUNT AS COUNT_TRANS
				IF @@TRANCOUNT>0 ROLLBACK TRANSACTION STATIONS_UPDATE;
				THROW;
				END CATCH 

	IF @@TRANCOUNT>0 COMMIT TRANSACTION STATIONS_UPDATE;



	BEGIN TRANSACTION IX_LEG

	BEGIN TRY
		
		
		ALTER TABLE 
			LEG_PAXCAT
		DROP CONSTRAINT 
			FK__LEG_PAXCA__LEG_I__398D8EEE;
			
		ALTER TABLE 
			LEG
		DROP CONSTRAINT 
			FK__LEG__DEPSTN__2E1BDC42, 
			FK__LEG__ARRSTN__2F10007B, 
			FK__LEG__CTRYCDFR__300424B4,
			FK__LEG__CTRYCDTO__30F848ED, 
			FK__LEG__STC_ID__31EC6D26, 
			FK__LEG__AIRCRAFT_ID__32E0915F;
	
		ALTER TABLE 
			LEG_CLASS
		DROP CONSTRAINT 
			FK__LEG_CLASS__LEG_I__35BCFE0A;

		DROP INDEX IX_AIRCRAFT_TYPE ON AIRCRAFTS;
		
		
		--STATION UPDATE


		UPDATE STATIONS
				SET 
					STN_FULL_NAME = ' ';


		MERGE STATIONS AS ST
			USING 
				(SELECT DISTINCT DEPSTN AS ST, CTRYCDFR AS CTR FROM LEG
				UNION
				SELECT DISTINCT ARRSTN, CTRYCDTO FROM LEG
				) AS SEL
			ON
				SEL.ST = ST.STN_KEY
			WHEN MATCHED THEN 
			UPDATE SET
				ST.STN_COUNTRY = SEL.CTR;



		-- LEG RECREATE with changes


		CREATE TABLE LEG_NEW
			(
				AC_VER_TYP_KEY int NOT NULL,
				LEG_KEY int IDENTITY(1,1) PRIMARY KEY CLUSTERED,
				FLTID varchar(10) NOT NULL,
				DATOP date NOT NULL,
				LEGNO int NULL,
				DEPSTN int NOT NULL,
				ARRSTN int NOT NULL,
				ATD datetime NOT NULL,
				ATA datetime NOT NULL,
				BLHR float NOT NULL,
				ABHR float NOT NULL,
				GRPNO varchar(10) NOT NULL,
				STC int NOT NULL,
				TOFF datetime NOT NULL,
				TDWN datetime NOT NULL,
				CNTR_DEF int NOT NULL,
				_CREATED datetime NOT NULL,
				_CHANGED datetime NOT NULL,
			);
		
		SET IDENTITY_INSERT LEG_NEW ON;

		INSERT INTO 
			LEG_NEW(
				AC_VER_TYP_KEY, 
				LEG_KEY, 
				FLTID, 
				DATOP, 
				LEGNO, 
				DEPSTN, 
				ARRSTN, 
				ATD, 
				ATA, 
				BLHR, 
				ABHR, 
				GRPNO, 
				STC, 
				TOFF, 
				TDWN, 
				CNTR_DEF, 
				_CREATED, 
				_CHANGED
				)
					SELECT 
						AIRCRAFT_ID, 
						ID,
						FLTID,
						DATOP,
						LEGNO,
						DEPSTN,
						ARRSTN,
						ATD,
						ATA,
						BLHR,
						ABHR,
						GRPNO,
						STC_ID,
						TOFF,
						TDWN,
						(CASE 
								WHEN CTRYCDFR IN (SELECT ID FROM COUNTRIES WHERE SCANDINAVIAN = 1) THEN CTRYCDFR
								WHEN CTRYCDTO IN (SELECT ID FROM COUNTRIES WHERE SCANDINAVIAN = 1) THEN CTRYCDTO
								ELSE CTRYCDFR
						END),
						(CASE 
								WHEN DATOP BETWEEN '2020-01-01' AND '2020-01-14' THEN '2022-05-19'
								WHEN DATOP BETWEEN '2020-01-15' AND '2020-01-31' THEN '2022-05-26'
								WHEN DATOP BETWEEN '2020-02-01' AND '2020-02-15' THEN '2022-06-02'
								ELSE '1900-01-01' 
						END),
						(CASE 
								WHEN DATOP BETWEEN '2020-01-01' AND '2020-01-14' THEN '2022-05-19'
								WHEN DATOP BETWEEN '2020-01-15' AND '2020-01-31' THEN '2022-05-26'
								WHEN DATOP BETWEEN '2020-02-01' AND '2020-02-15' THEN '2022-06-02'
								ELSE '1900-01-01' 
						END)
					FROM 
						LEG;


		SET IDENTITY_INSERT LEG_NEW  OFF;

		DROP TABLE LEG;
		
		exec sp_rename 'dbo.LEG_NEW', 'LEG';


		END TRY

				BEGIN CATCH
					SELECT 
						ERROR_NUMBER() AS ERROR_N,
						ERROR_MESSAGE() AS ERROR_M,
						ERROR_SEVERITY() AS ERROR_SEV,
						ERROR_LINE () AS ERROR_L,
						ERROR_PROCEDURE () AS ERROR_PROC,
						ERROR_STATE () AS ERROR_$TATE,
						@@TRANCOUNT AS COUNT_TRANS
				IF @@TRANCOUNT>0 ROLLBACK TRANSACTION IX_LEG;
				THROW;
				END CATCH 

	IF @@TRANCOUNT>0 COMMIT TRANSACTION IX_LEG;
	
	
	GO

	BEGIN TRANSACTION OTHER

		BEGIN TRY

		-- STC with changes

		exec sp_rename 'dbo.STC.ID', 'STC_KEY';
		exec sp_rename 'dbo.STC.STC', 'STC_NAME';
	
		ALTER TABLE 
				STC
					ADD 
						STC_FULL_NAME varchar(100) DEFAULT ' ';
	


		-- AIRCRAFT with changes

		exec sp_rename 'dbo.AIRCRAFT', 'AIRCRAFTS';
		exec sp_rename 'dbo.AIRCRAFTS.ID', 'AC_VER_TYP_KEY';
		exec sp_rename 'dbo.AIRCRAFTS.ACTYP', 'ACSTYP';


		-- COUNTRIES with changes

		exec sp_rename 'dbo.COUNTRIES.ID', 'COUNTRY_KEY';
		exec sp_rename 'dbo.COUNTRIES.COUNTRY', 'COUNTRY_NAME';

		ALTER TABLE 
				COUNTRIES
					ADD 
						COUNTRY_FULL_NAME varchar(100) DEFAULT ' ';
		
		
		ALTER TABLE COUNTRIES
		DROP COLUMN SCANDINAVIAN;



		
		-- LEG_CLASS RECREATE with changes

		CREATE TABLE LEG_CLASS_NEW
			(
				LEG_KEY int NOT NULL,
				CLASS varchar(1) NOT NULL,
				CONFIGA int NOT NULL,
				SEATED int NOT NULL,
				_CREATED datetime NOT NULL,
				_CHANGED datetime NOT NULL,
			);
		

		INSERT INTO 
			LEG_CLASS_NEW(
				LEG_KEY,
				CLASS,
				CONFIGA,
				SEATED,
				_CREATED,
				_CHANGED
				)
					SELECT 
						LEG_ID,
						CLASS,
						CONFIGA,
						SEATED,
						(SELECT _CHANGED FROM LEG AS L WHERE L.LEG_KEY = LC.LEG_ID),
						(SELECT _CHANGED FROM LEG AS L WHERE L.LEG_KEY = LC.LEG_ID)
					FROM 
						LEG_CLASS AS LC;

		DROP TABLE LEG_CLASS;
		
		exec sp_rename 'dbo.LEG_CLASS_NEW', 'LEG_CLASS';




		-- LEG_PAXCAT RECREATE with changes

		CREATE TABLE LEG_PAXCAT_NEW
			(
				LEG_KEY int NOT NULL,
				PAXCAT varchar(5) NOT NULL,
				ACTBD int NOT NULL,
				ACTTFR int NOT NULL,
				ACTTRT int NOT NULL,
				_CREATED datetime NOT NULL,
				_CHANGED datetime NOT NULL,
			);
		

		INSERT INTO 
			LEG_PAXCAT_NEW(
				LEG_KEY,
				PAXCAT,
				ACTBD,
				ACTTFR,
				ACTTRT,
				_CREATED,
				_CHANGED
				)
					SELECT 
						LEG_ID,
						PAXCAT,
						BD,
						TRF,
						TRT,
						(SELECT _CHANGED FROM LEG AS L WHERE L.LEG_KEY = LP.LEG_ID),
						(SELECT _CHANGED FROM LEG AS L WHERE L.LEG_KEY = LP.LEG_ID)
					FROM 
						LEG_PAXCAT AS LP;


		DROP TABLE LEG_PAXCAT;
		
		exec sp_rename 'dbo.LEG_PAXCAT_NEW', 'LEG_PAXCAT';
	
	
	END TRY

				BEGIN CATCH
					SELECT 
						ERROR_NUMBER() AS ERROR_N,
						ERROR_MESSAGE() AS ERROR_M,
						ERROR_SEVERITY() AS ERROR_SEV,
						ERROR_LINE () AS ERROR_L,
						ERROR_PROCEDURE () AS ERROR_PROC,
						ERROR_STATE () AS ERROR_$TATE,
						@@TRANCOUNT AS COUNT_TRANS
				IF @@TRANCOUNT>0 ROLLBACK TRANSACTION OTHER;
				THROW;
				END CATCH 
		

	IF @@TRANCOUNT>0 COMMIT TRANSACTION OTHER;


	GO


	BEGIN TRANSACTION PAXCAT_UP

	BEGIN TRY

		DECLARE @cnt INT = 1;

		WHILE @cnt < 21271
			BEGIN
			   INSERT INTO 
					LEG_PAXCAT(
						LEG_KEY,
						PAXCAT,
						ACTBD,
						ACTTFR,
						ACTTRT,
						_CREATED,
						_CHANGED)
				VALUES(@cnt, ' ', 0, 0, 0, '2022-06-02', '2022-06-02')
				SET @cnt = @cnt + 1;
			END;


	END TRY

				BEGIN CATCH
					SELECT 
						ERROR_NUMBER() AS ERROR_N,
						ERROR_MESSAGE() AS ERROR_M,
						ERROR_SEVERITY() AS ERROR_SEV,
						ERROR_LINE () AS ERROR_L,
						ERROR_PROCEDURE () AS ERROR_PROC,
						ERROR_STATE () AS ERROR_$TATE,
						@@TRANCOUNT AS COUNT_TRANS
				IF @@TRANCOUNT>0 ROLLBACK TRANSACTION PAXCAT_UP;
				THROW;
				END CATCH 

	IF @@TRANCOUNT>0 COMMIT TRANSACTION PAXCAT_UP;

	GO



	BEGIN TRANSACTION TAB_UPDATE

		BEGIN TRY

			
			UPDATE STATIONS
				SET 
					STN_FULL_NAME = ' ';

			UPDATE COUNTRIES
				SET 
					COUNTRY_FULL_NAME = ' ';

			UPDATE STC
				SET 
					STC_FULL_NAME = ' ';


			--PRIMARY KEYS CLASS AND PAXCAT

			ALTER TABLE LEG_CLASS
			ADD CONSTRAINT PK_LEG_CLASS
			PRIMARY KEY(LEG_KEY, CLASS);

			ALTER TABLE LEG_PAXCAT
			ADD CONSTRAINT PK_LEG_PAXCAT
			PRIMARY KEY(LEG_KEY, PAXCAT);

			--FOREIGN KEYS

			ALTER TABLE LEG
			ADD CONSTRAINT FK_LEG_AIRCRAFT
			FOREIGN KEY (AC_VER_TYP_KEY) REFERENCES AIRCRAFTS(AC_VER_TYP_KEY);

			ALTER TABLE LEG
			ADD CONSTRAINT FK_LEG_STC
			FOREIGN KEY (STC) REFERENCES STC(STC_KEY);

			ALTER TABLE LEG
			ADD CONSTRAINT FK_LEG_CNTR
			FOREIGN KEY (CNTR_DEF) REFERENCES COUNTRIES(COUNTRY_KEY);

			ALTER TABLE LEG
			ADD CONSTRAINT FK_LEG_DEPSTN
			FOREIGN KEY (DEPSTN) REFERENCES STATIONS(STN_KEY);

			ALTER TABLE LEG
			ADD CONSTRAINT FK_LEG_ARRSTN
			FOREIGN KEY (ARRSTN) REFERENCES STATIONS(STN_KEY);

			ALTER TABLE STATIONS
			ADD CONSTRAINT FK_STN_CNTR
			FOREIGN KEY (STN_COUNTRY) REFERENCES COUNTRIES(COUNTRY_KEY);
				
			ALTER TABLE LEG_CLASS
			ADD CONSTRAINT FK_LEG_CLASS_LEG
			FOREIGN KEY (LEG_KEY) REFERENCES LEG(LEG_KEY);
			
			ALTER TABLE LEG_PAXCAT
			ADD CONSTRAINT FK_LEG_PAXCAT
			FOREIGN KEY (LEG_KEY) REFERENCES LEG(LEG_KEY);


			--INDEXES

			CREATE NONCLUSTERED INDEX IX_LEG_DEPSTN
			ON LEG (DEPSTN); 

			CREATE NONCLUSTERED INDEX IX_LEG_ARRSTN
			ON LEG (ARRSTN); 

			CREATE NONCLUSTERED INDEX IX_LEG_STC
			ON LEG (STC);

			CREATE NONCLUSTERED INDEX IX_LEG_AIRCRAFT
			ON LEG (AC_VER_TYP_KEY);

			CREATE NONCLUSTERED INDEX IX_LEG_CNTR
			ON LEG (CNTR_DEF);

			CREATE NONCLUSTERED INDEX IX_STN_CNTR
			ON STATIONS (STN_COUNTRY);
			

		END TRY

				BEGIN CATCH
					SELECT 
						ERROR_NUMBER() AS ERROR_N,
						ERROR_MESSAGE() AS ERROR_M,
						ERROR_SEVERITY() AS ERROR_SEV,
						ERROR_LINE () AS ERROR_L,
						ERROR_PROCEDURE () AS ERROR_PROC,
						ERROR_STATE () AS ERROR_$TATE,
						@@TRANCOUNT AS COUNT_TRANS
				IF @@TRANCOUNT>0 ROLLBACK TRANSACTION TAB_UPDATE;
				THROW;
				END CATCH 

		IF @@TRANCOUNT>0 COMMIT TRANSACTION TAB_UPDATE;


		GO




SELECT 
	a.FLTID, a.DATOP, a.LEGNO, f.STN_NAME, g.COUNTRY_NAME, h.STN_NAME, i.COUNTRY_NAME, 
	a.ATD, a.ATA, a.BLHR, a.ABHR, a.GRPNO, j.STC_NAME, a.TOFF, a.TDWN, e.COUNTRY_NAME, 
	b.CLASS, b.CONFIGA, b.SEATED, c.PAXCAT, c.ACTBD, c.ACTTFR, c.ACTTRT, d.ACREG, 
	d.ACVER, d.ACOWN, d.ACSTYP, d.ACTYP_NAME
FROM 
	LEG a
	INNER JOIN LEG_CLASS b ON a.LEG_KEY = b.LEG_KEY
	INNER JOIN LEG_PAXCAT c ON a.LEG_KEY = c.LEG_KEY
	INNER JOIN AIRCRAFTS d ON a.AC_VER_TYP_KEY = d.AC_VER_TYP_KEY
	INNER JOIN COUNTRIES e ON a.CNTR_DEF = e.COUNTRY_KEY
	INNER JOIN STATIONS f ON a.DEPSTN = f.STN_KEY
	INNER JOIN COUNTRIES g ON f.STN_COUNTRY = g.COUNTRY_KEY
	INNER JOIN STATIONS h ON a.ARRSTN = h.STN_KEY
	INNER JOIN COUNTRIES i ON h.STN_COUNTRY = i.COUNTRY_KEY
	INNER JOIN STC j ON a.STC = j.STC_KEY
ORDER BY FLTID




