 USE Stat; 
GO 

--table for logging(ETL and another processes)

CREATE TABLE LOGS
(
	ID int IDENTITY(1,1),
	DATE_OF_LOGGING date NOT NULL,
	LOG_DATA varchar(100)
);
INSERT INTO LOGS(DATE_OF_LOGGING, LOG_DATA) SELECT GETDATE(), 'LOGS table was created';

/*
--Tables creation

CREATE TABLE STATIONS
(
	ID int IDENTITY(1,1) PRIMARY KEY CLUSTERED,
	STATION varchar(30) NOT NULL
);
INSERT INTO LOGS(DATE_OF_LOGGING, LOG_DATA) SELECT GETDATE(), 'STATIONS table was created';
GO

CREATE TABLE COUNTRIES
(
	ID int IDENTITY(1,1) PRIMARY KEY CLUSTERED,
	COUNTRY varchar(30) NOT NULL
);
INSERT INTO LOGS(DATE_OF_LOGGING, LOG_DATA) SELECT GETDATE(), 'COUNTRIES table was created';
GO

CREATE TABLE STC
(
	ID int IDENTITY(1,1) PRIMARY KEY CLUSTERED,
	STC varchar(30) NOT NULL
);
INSERT INTO LOGS(DATE_OF_LOGGING, LOG_DATA) SELECT GETDATE(), 'STC table was created';
GO

CREATE TABLE AIRCRAFT
	(
	ID int IDENTITY(1,1) PRIMARY KEY CLUSTERED,
	ACREG varchar(10) NOT NULL,
	ACVER varchar(10) NOT NULL,
	ACOWN varchar(3) NOT NULL,
	ACTYP varchar(3) NOT NULL,
	ACTYP_NAME varchar(50) NOT NULL
);
INSERT INTO LOGS(DATE_OF_LOGGING, LOG_DATA) SELECT GETDATE(), 'AIRCRAFT table was created';

CREATE TABLE LEG
(
	ID int IDENTITY(1,1) PRIMARY KEY CLUSTERED,
	FLTID varchar(10) NOT NULL,
	DATOP date NOT NULL,
	LEGNO int NULL,
	DEPSTN int NOT NULL REFERENCES STATIONS(ID),
	ARRSTN int NOT NULL REFERENCES STATIONS(ID),
	CTRYCDFR int NOT NULL REFERENCES COUNTRIES(ID) index IX_LEG_COUNTRYFROM nonclustered,
	CTRYCDTO int NOT NULL REFERENCES COUNTRIES(ID) index IX_LEG_COUNTRYTO nonclustered,
	BLHR float NOT NULL,
	ABHR float NOT NULL,
	GRPNO varchar(10) NOT NULL,
	STC_ID int NOT NULL REFERENCES STC(ID) index IX_LEG_STC nonclustered,
	AIRCRAFT_ID int NOT NULL REFERENCES AIRCRAFT(ID) index IX_LEG_AIRCRAFT nonclustered,
	INDEX IX_LEG_NoCl NONCLUSTERED (FLTID, DATOP, DEPSTN, ARRSTN)
);
INSERT INTO LOGS(DATE_OF_LOGGING, LOG_DATA) SELECT GETDATE(), 'LEG table was created';
GO

CREATE TABLE LEG_CLASS
(
	ID int IDENTITY(1,1) PRIMARY KEY CLUSTERED,
	CLASS varchar(1) NOT NULL,
	CONFIGA int NOT NULL,
	SEATED int NOT NULL,
	LEG_ID int NOT NULL REFERENCES LEG(ID) index IX_LEG_CLASS_LEGID nonclustered
);
INSERT INTO LOGS(DATE_OF_LOGGING, LOG_DATA) SELECT GETDATE(), 'LEG_CLASS table was created';
GO

*/


CREATE TABLE LEG_PAXCAT
(
	ID int IDENTITY(1,1) PRIMARY KEY CLUSTERED,
	PAXCAT varchar(5) NOT NULL,
	BD int NOT NULL,
	TRF int NOT NULL,
	TRT int NOT NULL,
	LEG_ID int NOT NULL REFERENCES LEG(ID) index IX_LEG_PAXCAT_LEGID nonclustered
);
INSERT INTO LOGS(DATE_OF_LOGGING, LOG_DATA) SELECT GETDATE(), 'LEG_PAXCAT table was created';
GO

ALTER TABLE LEG ADD NEW_KEY int DEFAULT 0 NOT NULL;

UPDATE LEG SET NEW_KEY = 4091900 + ID;

ALTER TABLE LEG DROP COLUMN NEW_KEY;

DELETE FROM LEG WHERE NEW_KEY>5100000;

GO


CREATE VIEW FLIGHT_Mq_CYq_CHDINFq_view
AS 
SELECT 
		NEW_KEY,
		FLTID, 
		DATOP, 
		LEGNO,
		ST.STATION AS DEPSTN, 
		(SELECT STATION FROM STATIONS WHERE STATIONS.ID = L.ARRSTN) AS ARRSTN, 
		C.COUNTRY AS CTRYCDFR, 
		(SELECT COUNTRY FROM COUNTRIES WHERE COUNTRIES.ID = L.CTRYCDTO) AS CTRYCDTO,
		BLHR,
		ABHR,
		GRPNO,
		S.STC,
		A.ACREG,
		A.ACVER,
		A.ACOWN,
		A.ACTYP,
		A.ACTYP_NAME,
		(SELECT SEATED FROM LEG_CLASS AS LC WHERE L.ID = LC.LEG_ID AND CLASS = 'M') AS M_CLASS_SEATED,
		(SELECT SUM(SEATED) FROM LEG_CLASS AS LC WHERE L.ID = LC.LEG_ID AND LC.CLASS IN ('Y','C') GROUP BY LC.LEG_ID) AS CY_CLASS_SEATED,
		(SELECT SUM(LP.BD+LP.TRF+LP.TRT) FROM LEG_PAXCAT AS LP WHERE L.ID = LP.LEG_ID AND LP.PAXCAT NOT IN ('CHD','INF') GROUP BY LP.LEG_ID) AS ADULTS,
		(SELECT SUM(LP.BD+LP.TRF+LP.TRT) FROM LEG_PAXCAT AS LP WHERE L.ID = LP.LEG_ID AND LP.PAXCAT IN ('CHD','INF') GROUP BY LP.LEG_ID) AS CHILDREN
	FROM LEG AS L
		LEFT JOIN STC AS S
			ON L.STC_ID=S.ID
		LEFT JOIN STATIONS AS ST
			ON L.DEPSTN=ST.ID
		LEFT JOIN COUNTRIES AS C
			ON L.CTRYCDFR=C.ID
		LEFT JOIN AIRCRAFT AS A
			ON L.AIRCRAFT_ID=A.ID;
	
SELECT * FROM FLIGHT_Mq_CYq_CHDINFq_view ORDER BY NEW_KEY;


CREATE FUNCTION ufn_FLIGHT_CLASS_SEATED(@var varchar(1)) 
RETURNS TABLE
AS
RETURN
(
	SELECT 
		NEW_KEY,
		FLTID, 
		DATOP, 
		LEGNO,
		ST.STATION AS DEPSTN, 
		(SELECT STATION FROM STATIONS WHERE STATIONS.ID = L.ARRSTN) AS ARRSTN, 
		C.COUNTRY AS CTRYCDFR, 
		(SELECT COUNTRY FROM COUNTRIES WHERE COUNTRIES.ID = L.CTRYCDTO) AS CTRYCDTO,
		BLHR,
		ABHR,
		GRPNO,
		S.STC,
		A.ACREG,
		A.ACVER,
		A.ACOWN,
		A.ACTYP,
		A.ACTYP_NAME,
		(SELECT SEATED FROM LEG_CLASS AS LC WHERE L.ID = LC.LEG_ID AND CLASS = @var) AS SEATED


	FROM LEG AS L
		LEFT JOIN STC AS S
			ON L.STC_ID=S.ID
		LEFT JOIN STATIONS AS ST
			ON L.DEPSTN=ST.ID
		LEFT JOIN COUNTRIES AS C
			ON L.CTRYCDFR=C.ID
		LEFT JOIN AIRCRAFT AS A
			ON L.AIRCRAFT_ID=A.ID
);

SELECT * FROM ufn_FLIGHT_CLASS_SEATED('M');

/*
SELECT 
	(
	CASE WHEN NEW_KEY > 5000000 THEN 
		SELECT TOP 1 DATOP FROM LEG
	ELSE
		SELECT TOP 1 FLTID FROM LEG
	) AS PASS
FROM LEG
*/

SELECT 
	NEW_KEY,
	CASE WHEN NEW_KEY > 5000000 THEN 
		LEGNO 
	ELSE
		NEW_KEY  END AS PASS
FROM LEG